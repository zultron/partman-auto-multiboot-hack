This is a hack to implement a 'multiboot' preseed method for the
debian installer's partman system.

The partman-auto and partman-auto-lvm systems both insist on wiping
out the entire disk for preseeded, unattended installations.  This is
not a requirement for manual installation.

As a result, some common configurations are not achievable by
preseeding, such as a dual-boot system or reinstalling the OS but
preserving data partitions.

In addition, partman-auto-lvm creates the last LV in the VG to fill up
all remaining space.  In some cases this makes no sense, such as a 2GB
swap partition using 80GB.  In other cases, it takes away options,
such as the ability to create snapshot volumes.

This hack is not a general solution and does not address those
scenarios.  This hack does one thing only.  It takes a preseeded
partman-auto/method 'multiboot' expert_recipe.  It assumes that
primary partitions and LVM PVs and VGs are already set up, and
preserves them.  The expert_recipe must define the VG to be reused,
and any LVs to be installed.  If any of the specified LVs already
exists, it removes them, and then creates new ones.  Any LVs not
specified in the expert_recipe are ignored.  Finally, the last LV is
created with the specified size, not the remaining space in the VG.

*** This is a hack. *** Do not use it unless the risk of destroying
data is acceptable.

/lib/partman/display.d/05initial_auto_multiboot:

  - handles new method 'multiboot'

  - disables 10initial_auto; initial code copied

  - runs /bin/autopartition-multiboot

/bin/autopartition-multiboot:

  - based on autopartition-lvm

  - calls auto_multiboot_prepare() instead of auto_lvm_perform(); see
    below

  - instead of running auto_lvm_perform(), copies bottom portion where
    LVs are created...

  - ...and runs /bin/perform_recipe_by_multiboot instead of
    /bin/perform_recipe_by_lvm

/lib/partman/lib/auto-multiboot.sh:

  * auto_multiboot_prepare()

    - like auto-lvm.sh:auto_lvm_prepare()

    - doesn't run auto_init_disks(), which wipes out every trace of
      LVM on a dev, and then wipes the disk label.

    - instead, later when $lvmscheme is known, it runs
      device_remove_conflicting_lvs() on each dev

    - upon signalling from device_remove_conflicting_lvs(), restart
      the partman server, as done in
      disk-label.sh:prepare_new_labels() (called from
      auto_init_disks())

    - then runs auto_multiboot_create_partitions() instead of
      auto_lvm_create_partitions()

    - finally runs update_all_multiboot() instead update_all(); this
      should be removed

  * auto_multiboot_create_partitions()

    - like auto-lvm.sh:auto_lvm_create_partitions()

    - instead of running create_primary_partitions() and
      create_partitions(), runs check_primary_partitions()

  * update_all_multiboot()

    - exactly like recipes.sh:update_all(); this should be removed

  * device_remove_conflicting_lvs()

    - copy of parts of lvm-remove.sh:device_remove_lvm()

    - removes LVs, but only those defined in the recipe; others aren't
      touched

    - PVs and VGs aren't touched

  * check_primary_partitions()

    - creates the $pv_devices list needed later in the install

    - small pieces copied from
      auto-shared.sh:create_primary_partitions()

/bin/perform_recipe_by_multiboot:

  - copy of perform_recipe_by_lvm

  - when creating the LV, it creates it to the specified size instead
    of filling the remaining space in the VG
